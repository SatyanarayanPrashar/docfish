File structure:
    attendanceSystem.git/
    âââ .git                    [ig]
    âââ .gitignore             [ig]
    âââ collect_faces.py
    âââ data                   [ig]
    âââ initialize_excel.py
    âââ load_data.py
    âââ main.py
    âââ models                 [ig]
    âââ pca.py
    âââ recognize_and_mark.py
    âââ requirements.txt
    âââ ssl_bypass.py
    âââ utils.py

Step 1: Create Installation Page
    Description: This step involves listing the dependencies and frameworks used in the codebase and writing down the installation steps.
    Files to read: requirements.txt
    
Step 2: Document Face Recognition Functionality
    Description: Document how face recognition and attendance marking is implemented.
    Functions to document:
        - recognize_face: Recognizes faces in real-time and marks attendance based on face duration.
            Key Terms: recognize_face, real-time face detection
        - mark_attendance: Marks attendance for the recognized person in an Excel file.
            Key Terms: mark_attendance, attendance recording

 Files to read: collect_faces.py

Step 3: Document Excel Initialization
    Description: Document the process of initializing the Excel sheet for attendance tracking.
    Function to Document:
        - initialize_excel: Initializes the Excel file for attendance tracking, creating it if it does not exist.
            Key Terms: initialize_excel, Excel sheet setup

 Files to read: initialize_excel.py

Step 4: Document Data Loading
    Description: Document the process of loading and preprocessing face image data for training.
    Function to Document:
        - load_face_data: Loads face images and their labels into a matrix and label array.
            Key Terms: load_face_data, face image data

 Files to read: load_data.py

Step 5: Document Model Training
    Description: Document the training process of the Eigenfaces model using PCA.
    Function to Document:
        - train_model: Trains the Eigenfaces model using PCA on face data.
            Key Terms: train_model, PCA training

 Files to read: main.py

Step 6: Document PCA Process
    Description: Document the PCA process used in training the model.
    Function to Document:
        - perform_pca: Performs PCA on the face data matrix to extract principal components (eigenfaces).
            Key Terms: perform_pca, principal components, PCA process

 Files to read: pca.py

Step 7: Document Location-Based Attendance Recognition
    Description: Document the features related to location-based attendance recognition.
    Functions to Document:
        - get_user_location: Fetches the user's current location using geocoder (IP-based).
            Key Terms: get_user_location, user location detection
        - is_in_classroom: Checks if the user is within the classroom range using geolocation.
            Key Terms: is_in_classroom, location validation
        - recognize_face: Recognizes faces in real-time and marks attendance for recognized faces if within classroom location.
            Key Terms: location-based recognition, face detection
        - mark_attendance (duplicate, already documented in Step 2): Marks attendance for the recognized person in an Excel file with status.

 Files to read: recognize_and_mark.py

Step 8: Document SSL Bypass Functionality
    Description: Document the process and purpose of bypassing SSL for geolocation services.
    Function to Document:
        - get_location: Retrieves the user location using Nominatim with SSL verification disabled.
            Key Terms: get_location, SSL bypass, geolocation service

 Files to read: ssl_bypass.py

Step 9: Document Utility Functions
    Description: Document utility functions used for saving and loading the model.
    Functions to Document:
        - save_model: Saves the PCA-based Eigenfaces model to files.
            Key Terms: save_model, model persistence
        - load_model: Loads the PCA-based Eigenfaces model from files.
            Key Terms: load_model, model retrieval

 Files to read: utils.py






📝: Step 1: Installation Page
---
## Installation
### Dependencies
The following libraries and tools are required to run the attendance system:
- numpy
- opencv-python
- scikit-learn
- pandas
- xlrd
- openpyxl
- geocoder
- geopy
- requests
Ensure you have Python and pip installed, then run the command:
```bash
pip install -r requirements.txt
```
_Last updated on: October 2023_

Step 2: Face Recognition Functionality
---
## Face Recognition
### recognize_face
This function uses OpenCV to perform real-time face detection. It continuously scans for faces in the video stream, processes each detected face to compare against known faces, and marks attendance in an Excel file using the `mark_attendance` function.

**Key Terms**: recognize_face, real-time face detection

### mark_attendance
This function records the attendance of the recognized individual in an Excel file. It checks for existing records to prevent duplications and updates only when a new attendance mark needs to be made.

**Key Terms**: mark_attendance, attendance recording

_Last updated on: October 2023_

Step 3: Excel Initialization
---
## Excel Initialization
### initialize_excel
Initializes and sets up an Excel file used for tracking attendance. If the file doesn't exist, this function creates a new one with the required headers and structure.

**Key Terms**: initialize_excel, Excel sheet setup

_Last updated on: October 2023_

Step 4: Data Loading
---
## Data Loading and Preprocessing
### load_face_data
Loads face images and their corresponding labels into structured arrays for model training. It converts images to grayscale matrices and organizes data for PCA processing.

**Key Terms**: load_face_data, face image data

_Last updated on: October 2023_

Step 5: Model Training
---
## Model Training
### train_model
Trains the Eigenfaces model using Principal Component Analysis (PCA). It processes the face data to extract meaningful features that improve recognition accuracy.

**Key Terms**: train_model, PCA training

_Last updated on: October 2023_

Step 6: PCA Process
---
## PCA Process
### perform_pca
Performs Principal Component Analysis on the face data matrix to derive the principal components, also known as 'eigenfaces', which represent face features in reduced dimensions.

**Key Terms**: perform_pca, principal components, PCA process

_Last updated on: October 2023_

Step 7: Location-Based Attendance Recognition
---
## Location-Based Recognition
### get_user_location
Fetches the user's current geographical location using IP-based geolocation services provided by geocoder.

**Key Terms**: get_user_location, user location detection

### is_in_classroom
Determines whether the user is within the designated classroom range based on geolocation coordinates.

**Key Terms**: is_in_classroom, location validation

### recognize_face
Similar to the face recognition described earlier, but includes an additional environmental check to confirm the recognized face is present within the classroom boundaries before marking attendance.

**Key Terms**: location-based recognition, face detection

_Last updated on: October 2023_

Step 8: SSL Bypass Functionality
---
## SSL Bypass
### get_location
Obtains the user's geolocation via the Nominatim service by temporarily disabling SSL verification. This may be necessary in environments where SSL verification poses issues.

**Key Terms**: get_location, SSL bypass, geolocation service

_Last updated on: October 2023_

Step 9: Utility Functions
---
## Utility Functions
### save_model
Saves the present PCA-based Eigenfaces model to dedicated files for persistence and later usage.

**Key Terms**: save_model, model persistence

### load_model
Loads a previously saved Eigenfaces model from files, reinstating it for immediate use in recognition tasks.

**Key Terms**: load_model, model retrieval

_Last updated on: October 2023_

All documentation is structured to ensure comprehensive guidelines are provided for developers and users regarding the operation and features of the attendance system software.